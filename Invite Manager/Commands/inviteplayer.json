{
  "name": "inviteplayer",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "MaaAe",
  "actions": [
    {
      "message": "0",
      "varName": "",
      "info": "0",
      "ParamN": "1",
      "separator": "",
      "storage": "1",
      "varName2": "messageParam",
      "count": "",
      "name": "Store Message Params"
    },
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "    // invite player\n    var messageParam = tempVars(\"messageParam\");\n    var invitePData = Actions.invitePData;\n    var guildID = msg.guild.id;\n\n    var userSelected = null;\n    if (!isNaN(messageParam)) {\n        var userFetched = client.users.fetch(messageParam);\n        if (userFetched != null) {\n            userSelected = userFetched.user;\n        }\n    } else if (msg.mentions.users.first() != null) {\n        userSelected = msg.mentions.users.first();\n    } else {\n        var fetchTest = client.users.cache.find(user => user.username == messageParam);\n\n        if (fetchTest != null) {\n            userSelected = fetchTest.user;\n        } else {\n            userSelected = msg.author;\n        }\n    }\n\n    async function main() {\n        if (userSelected != null) {\n            var invitedData = invitePData['invitedData'];\n            var inviterData = invitePData['inviterData'];\n\n            var invitedBy = \"None\";\n            var invited = \"None\";\n            var inviteStats = {\n                \"real\": 0,\n                \"invalid\": 0\n            };;\n\n\n            if (invitedData.hasOwnProperty(guildID) && invitedData[guildID].hasOwnProperty(userSelected.id) && invitedData[guildID][userSelected.id].length != 0) {\n                invitedBy = invitedData[guildID][userSelected.id];\n            }\n\n            if (inviterData.hasOwnProperty(guildID) && inviterData[guildID].hasOwnProperty(userSelected.id)) {\n                invited = inviterData[guildID][userSelected.id][\"invites\"];\n                inviteStats = inviterData[guildID][userSelected.id][\"data\"];\n            }\n\n            if (typeof invitedBy != \"string\") {\n                var invitedByUsers = [];\n\n                if (invitedBy.length >= 3) {\n                    invitedByUsers.push(...[invitedBy[invitedBy.legnth - 1], invitedBy[invitedBy.legnth - 2], invitedBy[invitedBy.legnth - 3]]);\n                } else {\n                    invitedByUsers.push(...invitedBy);\n                }\n\n                invitedBy = \"\";\n\n\n                for (i = 0; i < invitedByUsers.length; i++) {\n                    var fetchedMember = await client.users.fetch(invitedByUsers[i]);\n                    var fetchedInviter = inviterData[guildID][fetchedMember.id][\"invites\"].find(inviteMem => inviteMem.id == userSelected.id);\n\n                    invitedBy += `${fetchedMember} (${fetchedMember.tag})\\n**Code:** ${fetchedInviter[\"codeUsed\"]}`\n\n                    if (!fetchedInviter[\"valid\"]) {\n                        invitedBy += ` **(Invalid)**\\n**(${fetchedInviter[\"invalidCause\"]})**`\n                    }\n\n                    invitedBy += \"\\n\\n\"\n\n                }\n            }\n\n            if (typeof invited != \"string\") {\n                var multiPage = false;\n                var pages = [];\n                var pageText = [];\n                var pageIndex = 0;\n\n                var invitedByUsers = [];\n\n                if (invited.length >= 10) {\n                    for (i = 0; i < 10; i++) {\n                        invitedByUsers.push(invited[i]);\n                    }\n                } else {\n                    invited.forEach(invitedObject => {\n                        invitedByUsers.push(invitedObject);\n                    })\n                }\n\n                if (invitedByUsers.length > 5) {\n                    pageText[0] = \"\";\n                    multiPage = true;\n\n                    while (invitedByUsers.length) {\n                        pages.push(invitedByUsers.splice(0, 5))\n                    }\n\n                    for (i = 0; i < pages[0].length; i++) {\n                        var fetchedMember = await client.users.fetch(pages[0][i][\"id\"]);\n                        pageText[0] += `${fetchedMember} (${fetchedMember.tag})\\n**Code:** ${pages[0][i][\"codeUsed\"]}`\n                        \n\n                        if (!pages[0][i][\"valid\"]) {\n                            pageText[0] += ` **(Invalid)**\\n**(${pages[0][i][\"invalidCause\"]})**`\n                        }\n\n                        pageText[0] += \"\\n\\n\"\n                    }\n\n                } else {\n                    invited = \"\";\n                    for (i = 0; i < invitedByUsers.length; i++) {\n                        var fetchedMember = await client.users.fetch(invitedByUsers[i][\"id\"]);\n\n                        invited += `${fetchedMember} (${fetchedMember.tag})\\n**Code:** ${invitedByUsers[i][\"codeUsed\"]}`\n\n                        if (!invitedByUsers[i][\"valid\"]) {\n                            invited += ` **(Invalid)**\\n**(${invitedByUsers[i][\"invalidCause\"]})**`\n                        }\n\n                        invited += \"\\n\\n\"\n                    }\n                }\n            }\n\n\n            if (!multiPage) {\n                msg.channel.send({\n                    embed: {\n                        color: 0x0099ff,\n                        title: `${userSelected.username}'s Invite Profile`,\n                        fields: [{\n                                name: '✅ Real Invites',\n                                value: `${inviteStats[\"real\"]}`,\n                                inline: true\n                            },\n                            {\n                                name: '❎ Invalid Invites',\n                                value: `${inviteStats[\"invalid\"]}`,\n                                inline: true\n                            },\n                            {\n                                name: '👤 Invited by',\n                                value: invitedBy,\n                                inline: true,\n                            },\n                            {\n                                name: '📒 Invited',\n                                value: invited,\n                                inline: false,\n                            }\n                        ],\n                        thumbnail: {\n                            url: userSelected.avatarURL(),\n                        },\n                        timestamp: new Date(),\n                    }\n                });\n            } else {\n                msg.channel.send({\n                    embed: {\n                        color: 0x0099ff,\n                        title: `${userSelected.username}'s Invite Profile`,\n                        fields: [{\n                                name: '✅ Real Invites',\n                                value: `${inviteStats[\"real\"]}`,\n                                inline: true\n                            },\n                            {\n                                name: '❎ Invalid Invites',\n                                value: `${inviteStats[\"invalid\"]}`,\n                                inline: true\n                            },\n                            {\n                                name: '👤 Invited by',\n                                value: invitedBy,\n                                inline: true,\n                            },\n                            {\n                                name: '📒 Invited',\n                                value: pageText[0],\n                                inline: false,\n                            },\n                            {\n                                name: '📃 Page',\n                                value: `1/${pages.length}`,\n                                inline: true\n                            }\n                        ],\n                        thumbnail: {\n                            url: userSelected.avatarURL(),\n                        },\n                        timestamp: new Date(),\n                        footer: {\n                            text: \"Click the left and right arrow to browse the list! || Valid for 240 seconds\"\n                        }\n                    }\n                }).then(messageSent => {\n                    messageSent.react(\"⬅️\").then(() => {\n                        messageSent.react(\"➡️\")\n                    }).then(() => {\n                        const collector = messageSent.createReactionCollector((reaction, user) => ['⬅️', '➡️'].includes(reaction.emoji.name) && user.id == msg.author.id, {time: 240000});\n                        collector.on('collect', async (reaction) => {\n                            reaction.users.remove(msg.author.id);\n                            if (reaction.emoji.name === '⬅️') {\n                                if (pageIndex > 0) {\n                                    pageIndex -= 1;\n                                    messageSent.embeds[0].fields[3][\"value\"] = pageText[pageIndex];\n                                    messageSent.embeds[0].fields[4][\"value\"] = `${pageIndex + 1}/${pages.length}`;\n                                    messageSent.edit(messageSent.embeds[0]);\n                                }\n                            } else {\n                                if (pageIndex < pages.length - 1) {\n                                    pageIndex += 1;\n                                    var completedFetch = false;\n                                    if (pageText[pageIndex] == null) {\n                                        var pagesLength = pages[pageIndex].length;\n                                        pageText[pageIndex] = \"\";\n                                        for (i = 0; i < pages[pageIndex].length; i++) {\n\n                                            await client.users.fetch(pages[pageIndex][i][\"id\"]).then(fetchedMember => {\n                                                pageText[pageIndex] += `${fetchedMember}\\n**Code:** ${pages[pageIndex][i][\"codeUsed\"]}`\n\n                                                if (!pages[pageIndex][i][\"valid\"]) {\n                                                    pageText[pageIndex] += ` **(Invalid)**\\n**(${pages[pageIndex][i][\"invalidCause\"]})**`\n                                                }\n                                                pageText[pageIndex] += \"\\n\\n\"\n                                            }).catch();\n\n                                            if (pagesLength-1 == i) {\n                                                completedFetch = true;\n                                            }\n                                        }\n                                    } else {\n                                        completedFetch = true;\n                                    }\n\n                                    until(_=>completedFetch == true).then(() => {\n                                        messageSent.embeds[0].fields[3][\"value\"] = pageText[pageIndex];\n                                        messageSent.embeds[0].fields[4][\"value\"] = `${pageIndex + 1}/${pages.length}`;\n                                        messageSent.edit(messageSent.embeds[0]);\n                                    }).catch();\n                                }\n                            }\n                        });\n                        collector.on('end', collected => {\n                            messageSent.embeds[0].footer.text = \"Embed expired; reactions no longer work\";\n                            messageSent.edit(messageSent.embeds[0]);\n                        });\n\n\n                    }).catch();\n                }).catch();\n            }\n        }\n    }\n\n    function until(conditionFunction) {\n\n        const poll = resolve => {\n            if (conditionFunction()) resolve();\n            else setTimeout(_ => poll(resolve), 400);\n        }\n\n        return new Promise(poll);\n    }\n\n    main();\n\n    // VersionCheck:2",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ]
}