{
  "name": "inviteinfo",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "CcKpI",
  "actions": [
    {
      "message": "0",
      "varName": "",
      "info": "1",
      "ParamN": "1",
      "separator": " ",
      "storage": "1",
      "varName2": "messageParam",
      "count": "",
      "name": "Store Message Params"
    },
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "        //inviteinfo\n        var inviteCode = tempVars(\"messageParam\");\n        var inviteData = Actions.inviteData;\n        var inviteDataList;\n        var guildDatabase = Actions.fetchDatabase();\n        var invitePData = Actions.invitePData[\"inviterData\"];\n        var attempToFetch;\n\n        var completed = false;\n        var completedFetch = false;\n\n        if (inviteCode != null) {\n            if (inviteCode.includes(\"https://discord.gg/\")) {\n                inviteCode = inviteCode.split(\"https://discord.gg/\")[1].replace(/[^a-zA-Z0-9]/g, \"\");\n            }\n\n            attempToFetch = guildDatabase[msg.guild.id].get(inviteCode);\n            inviteDataList = inviteData[inviteCode];\n            if (attempToFetch != null || inviteDataList != null) {\n                if (attempToFetch == null) {\n                    attempToFetch = {\n                        \"uses\": inviteDataList[\"uses\"],\n                        \"inviter\": {\n                            \"id\": inviteDataList[\"inviter\"]\n                        },\n                        \"createdAt\": inviteDataList[\"codeCreated\"]\n                    };\n                }\n\n                inviteDataList = inviteDataList[\"playersTracked\"];\n\n                main();\n            } else {\n                errorMessage(\"The code seems to be invalid!\\nPlease check the code and try again!\")\n            }\n        } else {\n            errorMessage(\"Please supply an invite link or code!\")\n        }\n\n        async function main() {\n            var multiPage = false;\n            var pages = [];\n            var pageText = [];\n            var pageIndex = 0;\n            var skipStep = false;\n\n            var playerUsed = \"None\";\n            var avatarURL = \"https://via.placeholder.com/150\";\n            var codeCreator = \"Not found\";\n\n\n            if (attempToFetch[\"inviter\"][\"id\"] == \"0\") {\n                skipStep = true;\n            }\n\n            inviteDataList.reverse();\n\n            if (inviteDataList.length > 5) {\n                multiPage = true;\n\n                while (inviteDataList.length) {\n                    pages.push(inviteDataList.splice(0, 5))\n                }\n\n                pageText[0] = \"\";\n\n                for (i = 0; i < pages[0].length; i++) {\n                    var userID = pages[0][i];\n                    var clientFetch = await client.users.fetch(userID)\n                    if (!skipStep && invitePData[msg.guild.id][attempToFetch[\"inviter\"][\"id\"]][\"invites\"].find(inv => inv.id == userID && inv.invalidCause == \"User had left the server\") != null) {\n                        pageText[0] += `${clientFetch}\\n(${clientFetch.tag})\\n(Left server)\\n\\n`\n                    } else {\n                        pageText[0] += `${clientFetch}\\n(${clientFetch.tag})\\n\\n`\n                    }\n\n                    if (pages[0].length - 1 == i) {\n                        completed = true;\n                    }\n                }\n            } else {\n                playerUsed = \"\";\n\n                for (i = 0; i < inviteDataList.length; i++) {\n                    var userID = inviteDataList[i];\n                    var clientFetch = await client.users.fetch(userID)\n                    if (!skipStep && invitePData[msg.guild.id][attempToFetch[\"inviter\"][\"id\"]][\"invites\"].find(inv => inv.id == userID && inv.invalidCause == \"User had left the server\") != null) {\n                        playerUsed += `${clientFetch}\\n(${clientFetch.tag})\\n(Left server)\\n\\n`\n                    } else {\n                        playerUsed += `${clientFetch}\\n(${clientFetch.tag})\\n\\n`\n                    }\n\n                    if (inviteDataList.length - 1 == i) {\n                        completed = true;\n                    }\n                }\n            }\n\n            var newDate = attempToFetch[\"createdAt\"].toLocaleString(\"en-US\", {\n                timeZone: \"UTC\"\n            });\n\n            if (attempToFetch[\"inviter\"][\"id\"] != 0) {\n                if (!skipStep && attempToFetch[\"url\"] != null) {\n                    avatarURL = attempToFetch[\"inviter\"].avatarURL();\n                    codeCreator = `${attempToFetch[\"inviter\"]}\\n(${attempToFetch[\"inviter\"].tag})`\n                } else {\n                    await client.users.fetch(attempToFetch[\"inviter\"][\"id\"]).then(cliUser => {\n                        avatarURL = cliUser.avatarURL()\n                        codeCreator = `${cliUser}\\n(${cliUser.tag})`\n                    }).catch();\n                }\n            }\n\n            until(_ => completed == true).then(() => {\n                completed == false;\n                if (!multiPage) {\n                    msg.channel.send({\n                        embed: {\n                            color: 0x0099ff,\n                            title: `Invite Information (${inviteCode})`,\n                            fields: [{\n                                    name: `👤 Code creator`,\n                                    value: codeCreator,\n                                    inline: true\n                                },\n                                {\n                                    name: '📅 Created at',\n                                    value: (newDate != 0) ? newDate : \"Not found\",\n                                    inline: true\n                                },\n                                {\n                                    name: '🖱️ Uses',\n                                    value: attempToFetch[\"uses\"],\n                                    inline: true\n                                },\n                                {\n                                    name: '📒 Players Used Invite',\n                                    value: playerUsed,\n                                    inline: true\n                                }\n                            ],\n                            thumbnail: {\n                                url: avatarURL,\n                            },\n                            timestamp: new Date(),\n                        }\n                    })\n                } else {\n                    msg.channel.send({\n                        embed: {\n                            color: 0x0099ff,\n                            title: `Invite Information (${inviteCode})`,\n                            fields: [{\n                                    name: `👤 Code creator`,\n                                    value: codeCreator,\n                                    inline: true\n                                },\n                                {\n                                    name: '📅 Created at',\n                                    value: (newDate != 0) ? newDate : \"Not found\",\n                                    inline: true\n                                },\n                                {\n                                    name: '🖱️ Uses',\n                                    value: attempToFetch[\"uses\"],\n                                    inline: true\n                                },\n                                {\n                                    name: '📒 Players Used Invite',\n                                    value: pageText[0],\n                                    inline: true\n                                },\n                                {\n                                    name: '📃 Page',\n                                    value: `1/${pages.length}`,\n                                    inline: true\n                                }\n                            ],\n                            thumbnail: {\n                                url: avatarURL,\n                            },\n                            timestamp: new Date(),\n                            footer: {\n                                text: \"Click the left and right arrow to browse the list! || Valid for 240 seconds\"\n                            }\n                        }\n                    }).then(messageSent => {\n                        messageSent.react(\"⬅️\").then(() => {\n                            messageSent.react(\"➡️\")\n                        }).then(() => {\n                            const collector = messageSent.createReactionCollector((reaction, user) => ['⬅️', '➡️'].includes(reaction.emoji.name) && user.id == msg.author.id, {\n                                time: 240000\n                            });\n                            collector.on('collect', async (reaction) => {\n                                reaction.users.remove(msg.author.id);\n                                if (reaction.emoji.name === '⬅️') {\n                                    if (pageIndex > 0) {\n                                        pageIndex -= 1;\n                                        messageSent.embeds[0].fields[3][\"value\"] = pageText[pageIndex];\n                                        messageSent.embeds[0].fields[4][\"value\"] = `${pageIndex + 1}/${pages.length}`;\n                                        messageSent.edit(messageSent.embeds[0]);\n                                    }\n                                } else {\n                                    if (pageIndex < pages.length - 1) {\n                                        pageIndex += 1;\n                                        if (pageText[pageIndex] == null) {\n                                            var pagesLength = pages[pageIndex].length;\n                                            for (i = 0; i < pagesLength; i++) {\n                                                var userID = pages[pageIndex][i];\n                                                pageText[pageIndex] = \"\";\n                                                await client.users.fetch(userID).then(clientFetch => {\n                                                    if (!skipStep && invitePData[msg.guild.id][attempToFetch[\"inviter\"][\"id\"]][\"invites\"].find(inv => inv.id == userID && inv.invalidCause == \"User had left the server\") != null) {\n                                                        pageText[pageIndex] += `${clientFetch}\\n(${clientFetch.tag}) (Left server)\\n\\n`\n                                                    } else {\n                                                        pageText[pageIndex] += `${clientFetch}\\n(${clientFetch.tag})\\n\\n`\n                                                    }\n                                                }).catch();\n\n                                                if (pagesLength - 1 == i) {\n                                                    completedFetch = true;\n                                                }\n                                            }\n                                        } else {\n                                            completedFetch = true;\n                                        }\n\n\n                                        until(_ => completedFetch == true).then(() => {\n                                            completedFetch = false;\n                                            messageSent.embeds[0].fields[3][\"value\"] = pageText[pageIndex];\n                                            messageSent.embeds[0].fields[4][\"value\"] = `${pageIndex + 1}/${pages.length}`\n                                            messageSent.edit(messageSent.embeds[0]);\n                                        }).catch();\n                                    }\n                                }\n                            });\n                            collector.on('end', collected => {\n                                messageSent.embeds[0].footer.text = \"Embed expired; reactions no longer work\";\n                                messageSent.edit(messageSent.embeds[0]);\n                            });\n\n\n                        }).catch();\n                    }).catch();\n                }\n            }).catch();\n        }\n\n        function errorMessage(error) {\n\n            let errorTemplate = {\n                color: 0xFF0000,\n                title: `Invite Information`,\n                description: error,\n                timestamp: new Date(),\n            }\n\n            msg.channel.send({\n                embed: errorTemplate\n            });\n        }\n\n        function until(conditionFunction) {\n\n            const poll = resolve => {\n                if (conditionFunction()) resolve();\n                else setTimeout(_ => poll(resolve), 400);\n            }\n\n            return new Promise(poll);\n        }\n\n        // VersionCheck:3",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ]
}