{
  "name": "invitesettings",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "ppGiU",
  "actions": [
    {
      "behavior": "1",
      "interpretation": "1",
      "code": "//settings\nconst fs = require('fs');\nvar inviteSettings = Actions.inviteSettings;\nvar guildID = msg.guild.id;\n\nvar needsRewrite = false;\nvar fetchedChannel;\n\nvar awaitSettings = {\n    max: 1,\n    time: 60000,\n    errors: ['time'],\n};\n\nif (!checkProperty(inviteSettings, guildID)) {\n    inviteSettings[guildID] = {\n        \"logging\": {\n            \"enabled\": false,\n            \"format\": \"**{user1}** has joined using **{user2}**'s invite! | Code: **{code}**\\n(**{uses}** Uses)\",\n            \"channel\": \"0\",\n            \"description\": \"These settings involves the prompt that gets sent when a user joins the server.\"\n        },\n        \"invalidize\": {\n            \"age_check\": {\n                \"minimum\": 0,\n                \"enabled\": false\n            },\n            \"description\": \"These settings involves the invalidation of joins if a specific requirement is not met.\"\n        }\n    }\n    needsRewrite = true;\n    fetchedChannel = \"None\";\n}\n\nif (!needsRewrite) {\n    if (inviteSettings[guildID][\"logging\"][\"channel\"] != 0) {\n        var fetchCH = msg.guild.channels.cache.get(inviteSettings[guildID][\"logging\"][\"channel\"]);\n\n        if (fetchCH != null) {\n            fetchedChannel = fetchCH;\n        } else {\n            inviteSettings[guildID][\"logging\"][\"channel\"] = 0;\n            inviteSettings[guildID][\"logging\"][\"enabled\"] = false;\n            needsRewrite = true;\n            fetchedChannel = \"None\";\n        }\n    } else {\n        fetchedChannel = \"None\";\n    }\n}\n\nif (needsRewrite) {\n    fs.writeFile(\"./data/inviteManagerSettings.json\", JSON.stringify(inviteSettings), function(err) {\n        if (err) {\n            return console.log(err);\n        }\n    });\n\n    Actions.inviteSettings = inviteSettings;\n}\n\n\n\nvar guildSettings = inviteSettings[guildID];\nvar format = guildSettings[\"logging\"][\"format\"];\nvar setChannel = guildSettings[\"logging\"][\"channel\"];\nvar mm;\n\nvar initialEmbed = {\n    color: 0x0099ff,\n    title: `${msg.guild.name}'s Invite Manager Settings`,\n    fields: [{\n            name: `(1) Channel logging`,\n            value: `**Enabled**: ${(function(){if(guildSettings[\"logging\"][\"enabled\"]){return \"True\"}else{return \"False\"}})()}\\n\\n**Format**: \\n\\n${format}\\n**Format Example**: \\n\\n${(function(){return format.replace('{user1}', '@Example1').replace('{user2}', '@Example2').replace('{code}', 'exampleCode').replace('{uses}', '1')})()}\\n\\n**Set Logging Channel**: ${fetchedChannel}\\n\\n**Description**: ${guildSettings[\"logging\"][\"description\"]}`,\n            inline: false\n        },\n        {\n            name: '(2) Invite Checking',\n            value: `**Account Age Check**: ${(function(){if(guildSettings[\"invalidize\"][\"age_check\"][\"enabled\"]){return \"Enabled\"}else{return \"Disabled\"}})()}\\n**Minimum Age**: ${guildSettings[\"invalidize\"][\"age_check\"][\"minimum\"]}\\n\\n**Description**: ${guildSettings[\"invalidize\"][\"description\"]}`,\n            inline: false\n        },\n        {\n            name: 'Options',\n            value: `Please select **1** or **2** to modify the setting!\\nIf you would like to back out, please type \"cancel\"`\n        }\n    ],\n    thumbnail: {\n        url: msg.guild.iconURL(),\n    },\n    timestamp: new Date(),\n};\n\nvar editingEmbed = {\n    color: 0x0099ff,\n    title: `${msg.guild.name}'s Invite Manager Settings`,\n    description: \"\",\n    thumbnail: {\n        url: msg.guild.iconURL(),\n    },\n    timestamp: new Date(),\n}\n\nif (msg.member.hasPermission(\"MANAGE_GUILD\")) {\n    msg.channel.send({\n        embed: initialEmbed\n    }).then(mesg => mm = mesg)\n\n\n    msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n        .then(function(collected) {\n            var userInputValue = collected.first().content;\n            collected.first().delete();\n            if (userInputValue == \"1\") {\n                channelLogging(\"\");\n            } else if (userInputValue == \"2\") {\n                inviteCheck(\"\");\n            } else if (userInputValue.toLowerCase() == \"cancel\") {\n                mm.delete();\n            } else {\n                errorMessage(\"No valid options were selected!\");\n            }\n        }).catch((error) => {\n            errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n        });\n\n} else {\n    msg.channel.send({\n        embed: {\n            color: 0xFF0000,\n            title: `${msg.guild.name}'s Invite Manager Settings (Error)`,\n            description: \"You don't have the MANAGE_GUILD permission to use this command!\",\n            timestamp: new Date(),\n        }\n    });\n}\n\n\nfunction channelLogging(extraText) {\n    editingEmbed[\"description\"] = `**(1)** ${(function(){if(guildSettings[\"logging\"][\"enabled\"]){return \"Disable\"}else{return \"Enable\"}})()} logging\\n**(2)** Reselect channel\\n**(3)** Change format\\n\\nPlease respond with  **1** or **2** or **3** to change that setting!\\n\\nOnce you are done, please respond with **done**.\\n\\n${(function(){if(extraText == \"\"){return \"\"}else{return extraText}})()}`;\n    mm.edit({\n        embed: editingEmbed\n    });\n    msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n        .then(function(collected) {\n            var responseCollected = collected.first();\n            responseCollected.delete();\n            if (responseCollected.content == \"1\") {\n                if (setChannel != 0) {\n                    var updatedSettings = Actions.inviteSettings;\n                    updatedSettings[guildID][\"logging\"][\"enabled\"] = !updatedSettings[guildID][\"logging\"][\"enabled\"];\n                    updateFile(updatedSettings);\n                    channelLogging(`Channel logging has been ${(function(){if(updatedSettings[guildID][\"logging\"][\"enabled\"]) {return \"enabled\"} else {return \"disabled\"}})()}!`);\n                } else {\n                    editingEmbed[\"description\"] = \"Please mention a channel to set as the logging channel!\";\n                    mm.edit({\n                        embed: editingEmbed\n                    });\n                    msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n                        .then(function(collected) {\n                            collected.first().delete();\n                            var collectedMentions = collected.first().mentions;\n                            if (collectedMentions.channels.first() != null) {\n                                var updatedSettings = Actions.inviteSettings;\n\n                                updatedSettings[guildID][\"logging\"][\"channel\"] = collectedMentions.channels.first().id;\n                                updatedSettings[guildID][\"logging\"][\"enabled\"] = true;\n\n                                updateFile(updatedSettings);\n                                channelLogging(`Logging has been enabled and the logging channel has been set to ${collectedMentions.channels.first()}`);\n                            } else {\n                                channelLogging(\"You didn't mention a valid channel! Operation cancelled.\");\n                            }\n                        })\n                        .catch((error) => {\n                            errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n                        });\n                }\n\n\n            } else if (responseCollected.content == \"2\") {\n                editingEmbed[\"description\"] = \"Please mention a channel to set as the logging channel!\";\n                mm.edit({\n                    embed: editingEmbed\n                });\n                msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n                    .then(function(collected) {\n                        collected.first().delete();\n                        var collectedMentions = collected.first().mentions;\n                        if (collectedMentions.channels.first() != null) {\n                            var updatedSettings = Actions.inviteSettings;\n\n                            updatedSettings[guildID][\"logging\"][\"channel\"] = collectedMentions.channels.first().id;\n\n                            updateFile(updatedSettings);\n                            channelLogging(`Logging channel has been set to ${collectedMentions.channels.first()}`);\n                        } else {\n                            channelLogging(\"You didn't mention a valid channel! Operation cancelled.\");\n                        }\n                    })\n                    .catch((error) => {\n                        errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n                    });\n            } else if (responseCollected.content == \"3\") {\n                editingEmbed[\"description\"] = \"The current format is `\" + inviteSettings[guildID][\"logging\"][\"format\"] + \"`\" + `\\n\\nThis results in the following:\\n${function(){return format.replace('{user1}', '@Example1').replace('{user2}', '@Example2').replace('{code}', 'exampleCode').replace('{uses}', '1')}()}\\n\\nUsing the above example, please type your custom format in!\\n**Avaliable Variables**: **{user1}** | **{user2}** | **{code}** | **{uses}**`;\n                mm.edit({\n                    embed: editingEmbed\n                });\n                msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n                    .then(function(collected) {\n                        var tempFormat = collected.first().content;\n                        collected.first().delete();\n                        editingEmbed[\"description\"] = \"You typed the format `\" + tempFormat + \"`\" + `\\n\\nThis results in the following:\\n${function(){return tempFormat.replace('{user1}', '@Example1').replace('{user2}', '@Example2').replace('{code}', 'exampleCode').replace('{uses}', '1')}()}\\n\\nIf you like the outcome, please respond with \"done\" to set the change or \"cancel\" to back out.`;\n                        mm.edit({\n                            embed: editingEmbed\n                        });\n                        msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n                            .then(function(collected) {\n                                var finalDes = collected.first().content;\n                                collected.first().delete();\n\n                                if (finalDes.toLowerCase() == \"done\") {\n                                    var updatedSettings = Actions.inviteSettings;\n\n                                    updatedSettings[guildID][\"logging\"][\"format\"] = tempFormat;\n                                    channelLogging(\"The format has been changed to: `\" + tempFormat + \"`\")\n                                    updateFile(updatedSettings);\n                                } else if (finalDes.toLowerCase() == \"cancel\") {\n                                    channelLogging(\"The operation has been cancelled.\");\n                                } else {\n                                    channelLogging(\"You have entered a invalid response!\");\n                                }\n                            })\n                            .catch((error) => {\n                                errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n                            });\n                    })\n                    .catch((error) => {\n                        errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n                    });\n            } else if (responseCollected.content.toLowerCase() == \"done\") {\n                mm.delete();\n            } else {\n                channelLogging(\"Please selct a valid option!\");\n            }\n\n        })\n        .catch((error) => {\n            console.log(error);\n            errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n        });\n}\n\nfunction inviteCheck(extraText) {\n    editingEmbed[\"description\"] = `**(1)** ${(function(){if(guildSettings[\"invalidize\"][\"age_check\"][\"enabled\"]){return \"Disable\"}else{return \"Enable\"}})()} logging\\n**(2)** Reselect account age requirement\\n\\nPlease respond with  **1** or **2** to change that setting!\\n\\nOnce you are done, please respond with **done**.\\n\\n${(function(){if(extraText == \"\"){return \"\"}else{return extraText}})()}`;\n    mm.edit({\n        embed: editingEmbed\n    });\n    msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n        .then(function(collected) {\n            collected.first().delete();\n            var responseCollected = collected.first();\n            if (responseCollected.content == \"1\") {\n                var updatedSettings = Actions.inviteSettings;\n\n                updatedSettings[guildID][\"invalidize\"][\"age_check\"][\"enabled\"] = !updatedSettings[guildID][\"invalidize\"][\"age_check\"][\"enabled\"];\n                updateFile(updatedSettings);\n                inviteCheck(\"Minimum account age check has been enabled!\");\n            } else if (responseCollected.content == \"2\") {\n                editingEmbed[\"description\"] = \"Please respond with the minimum age the account needs to be (in days) to qualify to count as a real invite.\";\n                mm.edit({\n                    embed: editingEmbed\n                });\n                msg.channel.awaitMessages(response => response.author.id == msg.author.id, awaitSettings)\n                    .then(function(collected) {\n                        collected.first().delete();\n                        var collectedContent = collected.first().content;\n                        if (!isNaN(collectedContent)) {\n                            var updatedSettings = Actions.inviteSettings;\n                            updatedSettings[guildID][\"invalidize\"][\"age_check\"][\"minimum\"] = parseInt(collectedContent);\n                            updateFile(updatedSettings);\n                            inviteCheck(`The account minimum age requirement has been set to ${updatedSettings[guildID][\"invalidize\"][\"age_check\"][\"minimum\"]} days!`);\n                        } else {\n                            inviteCheck(`An invalid number was entered! Please respond with a valid number!`);\n                        }\n                    })\n                    .catch((error) => {\n                        errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n                    });\n            } else if (responseCollected.content.toLowerCase() == \"done\") {\n                mm.delete();\n            } else {\n                inviteCheck(\"Please selct a valid option!\");\n            }\n        })\n        .catch((error) => {\n            errorMessage('Sorry, you didnt provide a valid response in time!\\nPlease re-execute the command to restart the operation!');\n        });\n}\n\nfunction updateFile(data) {\n    fs.writeFile(\"./data/inviteManagerSettings.json\", JSON.stringify(data), function(err) {\n        if (err) {\n            return console.log(err);\n        }\n    });\n\n    Actions.inviteSettings = data;\n}\n\nfunction checkProperty(item, check) {\n    if (item[check] == null) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction errorMessage(error) {\n    let errorTemplate = {\n        color: 0xFF0000,\n        title: `${msg.guild.name}'s Invite Manager Settings (Error)`,\n        description: error,\n        timestamp: new Date(),\n    }\n\n    if (mm != null) {\n        mm.edit({\n            embed: errorTemplate\n        });\n    } else {\n        msg.channel.send({\n            embed: errorTemplate\n        });\n    }\n}\n\n// VersionCheck:3",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ]
}